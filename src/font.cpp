#include "font.h"
#include "helpers.h"

// 08X08-F2 Resized to fit 400x240 display - Source Width:320, Height:16
// Charset starts with Space (32), add 40 bytes to get next vertical slice
// and 2560 to get to second line
// Charset layout:
// !"    '() +,-. 0123456789:;  ? ABCDEFG
//         HIJKLMNOPQRSTUVWXYZ
byte BasicFont[750] = { 
	0x00, 0x18, 0x66, 0x6c, 0x10, 0x00, 0x00, 0x18, 0x18, 0x30, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x30, 0xfc, 0xfc, 
	0xc0, 0xfe, 0x7e, 0xfe, 0x7c, 0x7c, 0x00, 0x00, 0x0e, 0x00, 
	0x70, 0x3c, 0x3c, 0x0c, 0xfc, 0x7c, 0xfc, 0x7e, 0xfe, 0x7c, 
	0x00, 0x18, 0x66, 0xfe, 0x7e, 0x00, 0x00, 0x18, 0x30, 0x18, 
	0x54, 0x18, 0x00, 0x00, 0x00, 0x03, 0xfe, 0x70, 0xfe, 0xfe, 
	0xc0, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0x30, 0x18, 0x18, 0x00, 
	0x18, 0x66, 0x66, 0x3e, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 
	0x00, 0x18, 0x66, 0x6c, 0xd0, 0x00, 0x00, 0x18, 0x60, 0x0c, 
	0x38, 0x18, 0x00, 0x00, 0x00, 0x06, 0xce, 0x30, 0x0e, 0x06, 
	0xcc, 0xc0, 0xc0, 0x0e, 0xc6, 0xc6, 0x30, 0x18, 0x30, 0x7e, 
	0x0c, 0x06, 0x6e, 0x36, 0x06, 0xc6, 0x06, 0xc0, 0x00, 0xc0, 
	0x00, 0x18, 0x00, 0x6c, 0x7c, 0x00, 0x00, 0x00, 0x60, 0x0c, 
	0x7c, 0x7e, 0x00, 0x7e, 0x00, 0x0c, 0xd6, 0x30, 0x3c, 0x7c, 
	0xcc, 0xfc, 0xfc, 0x1c, 0x7c, 0xfe, 0x00, 0x00, 0x60, 0x00, 
	0x06, 0x0c, 0x6e, 0x66, 0xfc, 0xc0, 0xc6, 0xfe, 0xfc, 0xce, 
	0x00, 0x00, 0x00, 0x6c, 0x16, 0x00, 0x00, 0x00, 0x60, 0x0c, 
	0x38, 0x7e, 0x00, 0x00, 0x00, 0x18, 0xe6, 0x30, 0xf0, 0x06, 
	0xfe, 0x0e, 0xc6, 0x38, 0xc6, 0x06, 0x30, 0x18, 0x30, 0x7e, 
	0x0c, 0x18, 0x60, 0x7e, 0xc6, 0xc6, 0xc6, 0xc0, 0xc0, 0xc6, 
	0x00, 0x18, 0x00, 0xfe, 0xfc, 0x00, 0x00, 0x00, 0x30, 0x18, 
	0x54, 0x18, 0x18, 0x00, 0x18, 0x30, 0xfe, 0xfc, 0xfe, 0xfe, 
	0xfe, 0xfe, 0xfe, 0x38, 0xfe, 0xfe, 0x30, 0x18, 0x18, 0x00, 
	0x18, 0x00, 0x62, 0xc6, 0xfe, 0xfe, 0xfe, 0xfe, 0xc0, 0xfe, 
	0x00, 0x18, 0x00, 0x6c, 0x10, 0x00, 0x00, 0x00, 0x18, 0x30, 
	0x00, 0x18, 0x18, 0x00, 0x18, 0x60, 0x7c, 0xfc, 0xfe, 0xfc, 
	0x0c, 0xfc, 0x7c, 0x38, 0x7c, 0x7c, 0x00, 0x30, 0x0e, 0x00, 
	0x70, 0x18, 0x3c, 0xc6, 0xfc, 0x7c, 0xfc, 0x7e, 0xc0, 0x7c, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xc6, 0x7e, 0x7e, 0xcc, 0xc0, 0xc6, 0xcc, 0x7c, 0xfc, 0x7c, 
	0xf8, 0x7e, 0xf8, 0xc6, 0xc6, 0xc6, 0xc6, 0x66, 0xfe, 0xfe, 
	0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 
	0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xc6, 0x7e, 0x7e, 0xd8, 0xc0, 0xee, 0xec, 0xfe, 0xfe, 0xfe, 
	0xfe, 0xfe, 0xfc, 0xc6, 0xc6, 0xc6, 0xee, 0x66, 0xfe, 0xfe, 
	0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 
	0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xc6, 0x18, 0x0c, 0xf0, 0xc0, 0xfe, 0xfc, 0xc6, 0x06, 0xc6, 
	0x06, 0xc0, 0x0c, 0xc6, 0xc6, 0xd6, 0x7c, 0x66, 0x1c, 0xfe, 
	0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 
	0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xf6, 0x18, 0xcc, 0xf0, 0xc0, 0xfe, 0xfc, 0xc6, 0xfc, 0xc6, 
	0xfc, 0x7c, 0x0c, 0xc6, 0xc6, 0xfe, 0x38, 0x3c, 0x38, 0xfe, 
	0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 
	0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xc6, 0x18, 0xcc, 0xd8, 0xc0, 0xd6, 0xdc, 0xc6, 0xc0, 0xc6, 
	0xc6, 0x06, 0x0c, 0xc6, 0xee, 0xfe, 0x7c, 0x18, 0x70, 0xfe, 
	0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 
	0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xc6, 0x7e, 0xfc, 0xcc, 0xfe, 0xc6, 0xcc, 0xfe, 0xc0, 0xfe, 
	0xc6, 0xfe, 0x0c, 0xfe, 0x7c, 0xee, 0xee, 0x18, 0xfe, 0xfe, 
	0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 
	0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xc6, 0x7e, 0x78, 0xc6, 0x7e, 0xc6, 0xcc, 0x7c, 0xc0, 0x7b, 
	0xc6, 0xfc, 0x0c, 0x7c, 0x38, 0xc6, 0xc6, 0x18, 0xfe, 0xfe, 
	0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 
	0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	};

void draw_character(byte destx, byte desty, byte character, uint16_t color )
{
  bool row2 = false;
  if( character < ' ' || character > 'Z' ) character = ' '; // Convert non-printables to spaces
  if( character > 'G' ) 
  {
    row2 = true;
    character -= 'H';
  }
  else
  {
    character -= 32;
  }

  byte* src = BasicFont;
  if( row2 )
  {
    src = BasicFont + (40*8);
  }
  src += character;

  for( int y = 0; y < 8; y++ )
  {
    byte c = src[y*40];
    for( int x = 0; x < 8; x++)
    {
      if( c & (0x80 >> x) )
      {
        int dx = (int)destx + x;
        int dy = (int)desty + y;
        if( !( dx < 0 || dy < 0 || dx > 63 || dy > 63 ) )
          matrix->Pixel_R( dx, dy, color );  
      }
    }
  }
}

void draw_string( byte destx, byte desty, uint16_t color, const char *string )
{
  while( byte c = *(string++ ) )
  {
    draw_character(destx, desty, c, color);
    destx += 8;
  }
}

void draw_string( byte destx, byte desty, byte r, byte g, byte b, const char *string )
{
  uint16_t color = matrix->color565(r,g,b);
  draw_string(destx,desty,color,string);
}